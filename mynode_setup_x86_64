#!/bin/bash

###
### Setup myNode (x86_64 devices)
### Run with "sudo"
###

sudo -v

set -x
set -e

# Usage: $0 <ip address | online>
if [ "$#" != "1" ]; then
    echo "myNode ONLINE..."
    SERVER_IP=online
else
    echo "myNode IP ADDRESS..."
    SERVER_IP=$1
fi

sudo apt -y install lsb-release

# Determine Device

IS_X86=0
IS_32_BIT=0
IS_64_BIT=0
IS_UNKNOWN=1
DEVICE_TYPE="unknown"
LINUX=$(lsb_release -i | awk -F ":" '{printf tolower($2)}' | sed -e 's/^[[:space:]]*//')
if [ $LINUX == "pop" ]; then
    LINUX="ubuntu"
fi   
DEBIAN_VERSION=$(lsb_release -c -s) || DEBIAN_VERSION="unknown"

uname -a | grep x86_64 && IS_X86=1 && IS_64_BIT=1 && IS_UNKNOWN=0 || true

if [ $IS_UNKNOWN = 1 ]; then
    echo "UNKNOWN DEVICE TYPE"
    exit 1
fi


# Set kernel settings
sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1


# Set DNS for install (new)
#sudo echo "" >> /etc/dhcp/dhclient.conf
#sudo echo "append domain-name-servers 1.1.1.1, 8.8.8.8;" >> /etc/dhcp/dhclient.conf
#sudo dhclient -r


# Download rootfs
sudo rm -rf /tmp/rootfs.tar.gz
sudo rm -rf /tmp/upgrade/
sudo mkdir -p /tmp/upgrade

TARBALL=""
if [ $IS_X86 = 1 ]; then
    TARBALL="mynode_rootfs_debian.tar.gz"
fi
if [ "$SERVER_IP" == "online" ]; then
    TARBALL="${TARBALL/"mynode_rootfs_"/"mynode_release_latest_"}"
    sudo wget https://mynodebtc.com/device/upgrade_images/${TARBALL} -O /tmp/rootfs.tar.gz
else
    sudo wget http://${SERVER_IP}:8000/${TARBALL} -O /tmp/rootfs.tar.gz
fi

# Extract rootfs (so we can reference temporary files)
sudo tar -xvf /tmp/rootfs.tar.gz -C /tmp/upgrade/
TMP_INSTALL_PATH="/tmp/upgrade/out/rootfs_*"

# Setup some dependencies
sudo mkdir -p /usr/share/mynode/
sudo cp -f /tmp/upgrade/out/rootfs_*/usr/share/mynode/mynode_device_info.sh /usr/share/mynode/mynode_device_info.sh
sudo cp -f /tmp/upgrade/out/rootfs_*/usr/share/mynode/mynode_config.sh /usr/share/mynode/mynode_config.sh
sudo cp -f /tmp/upgrade/out/rootfs_*/usr/share/mynode/mynode_functions.sh /usr/share/mynode/mynode_functions.sh
sudo cp -f /tmp/upgrade/out/rootfs_*/usr/bin/mynode-get-device-serial /usr/bin/mynode-get-device-serial

# Source file containing app versions
source /tmp/upgrade/out/rootfs_*/usr/share/mynode/mynode_app_versions.sh

# torrc.d dir
sudo mkdir -p /etc/torrc.d

# Create any necessary users
sudo useradd -p $(openssl passwd -1 bolt) -m -s /bin/bash admin || true
sudo useradd -m -s /bin/bash bitcoin || true
sudo useradd -m -s /bin/bash joinmarket || true
sudo passwd -l root
sudo adduser admin sudo

# Setup bitcoin user folders
sudo mkdir -p /home/bitcoin/.mynode/
sudo chown bitcoin:bitcoin /home/bitcoin
sudo chown -R bitcoin:bitcoin /home/bitcoin/.mynode/

# Update host info
sudo hostnamectl set-hostname myNode
# sudo echo "myNode" > /etc/hostname

# Update sources
sudo apt-get -y update --allow-releaseinfo-change

# install SSH
sudo apt-get -y install ssh

# Add sources
sudo apt-get -y install apt-transport-https curl gnupg ca-certificates

# tor project
if [ $IS_64_BIT = 1 ]; then
    sudo grep -qxF "deb https://deb.torproject.org/torproject.org ${DEBIAN_VERSION} main" /etc/apt/sources.list  || echo "deb https://deb.torproject.org/torproject.org ${DEBIAN_VERSION} main" >> /etc/apt/sources.list
    sudo grep -qxF "deb-src https://deb.torproject.org/torproject.org ${DEBIAN_VERSION} main" /etc/apt/sources.list  || echo "deb-src https://deb.torproject.org/torproject.org ${DEBIAN_VERSION} main" >> /etc/apt/sources.list
fi
if [ "$DEBIAN_VERSION" = "buster" ]; then
    sudo grep -qxF "deb http://deb.debian.org/debian buster-backports main" /etc/apt/sources.list  || echo "deb http://deb.debian.org/debian buster-backports main" >> /etc/apt/sources.list
fi

# Add I2P Repo
# /bin/bash $TMP_INSTALL_PATH/usr/share/mynode/scripts/add_i2p_repo.sh
# Not working when Pop_OS
echo "Importing I2P signing key"
sudo wget -q -O - https://repo.i2pd.xyz/r4sas.gpg | apt-key --keyring /etc/apt/trusted.gpg.d/i2pd.gpg add -
echo "Adding I2P APT repository"
sudo echo "deb https://repo.i2pd.xyz/$LINUX $DEBIAN_VERSION main" > /etc/apt/sources.list.d/i2pd.list
sudo echo "deb-src https://repo.i2pd.xyz/$LINUX $DEBIAN_VERSION main" >> /etc/apt/sources.list.d/i2pd.list

# Import Keys
sudo curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
sudo curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
sudo curl https://keybase.io/guggero/pgp_keys.asc | gpg --import # Pool
sudo curl https://raw.githubusercontent.com/JoinMarket-Org/joinmarket-clientserver/master/pubkeys/AdamGibson.asc | gpg --import
sudo gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 01EA5486DE18A882D4C2684590C8019E36C2E964
sudo gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys E777299FC265DD04793070EB944D35F9AC3DB76A # Bitcoin - Michael Ford (fanquake)
sudo curl https://keybase.io/suheb/pgp_keys.asc | gpg --import
sudo curl https://samouraiwallet.com/pgp.txt | gpg --import # two keys from Samourai team
sudo gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys DE23E73BFA8A0AD5587D2FCDE80D2F3F311FD87E #loopd
sudo gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 26984CB69EB8C4A26196F7A4D7D916376026F177 # Lightning Terminal
sudo wget -q https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc -O- | apt-key add - # Tor
sudo gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 648ACFD622F3D138     # Debian Backports
sudo gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 0E98404D386FA1D9     # Debian Backports
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 74A941BA219EC810   # Tor
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 66F6C87B98EBCFE2   # I2P (R4SAS)

# Update OS
# Needed to accept new repos
sudo apt update 


# Freeze any packages we don't want to update
if [ $IS_X86 = 1 ]; then
    sudo apt-mark hold grub*
fi

# Upgrade packages
sudo apt-get -y upgrade

# Install other tools (run section multiple times to make sure success)
export DEBIAN_FRONTEND=noninteractive
sudo apt-get -y install apt-transport-https lsb-release
sudo apt-get -y install htop git curl bash-completion jq dphys-swapfile lsof libzmq3-dev
sudo apt-get -y install build-essential python3-dev python3-pip python3-grpcio
sudo apt-get -y install transmission-cli fail2ban ufw tclsh redis-server
sudo apt-get -y install clang hitch zlib1g-dev libffi-dev file toilet ncdu
sudo apt-get -y install toilet-fonts avahi-daemon figlet libsecp256k1-dev
sudo apt-get -y install inotify-tools libssl-dev tor tmux screen fonts-dejavu
sudo apt-get -y install pv sysstat network-manager rsync parted unzip pkg-config
sudo apt-get -y install libfreetype6-dev libpng-dev libatlas-base-dev libgmp-dev libltdl-dev
sudo apt-get -y install libffi-dev libssl-dev python3-bottle automake libtool libltdl7
sudo apt-get -y -qq install apt-transport-https ca-certificates
sudo apt-get -y install openjdk-11-jre libevent-dev ncurses-dev
sudo apt-get -y install zlib1g-dev libudev-dev libusb-1.0-0-dev python3-venv gunicorn
sudo apt-get -y install sqlite3 libsqlite3-dev torsocks python3-requests libsystemd-dev
sudo apt-get -y install libjpeg-dev zlib1g-dev psmisc hexyl libbz2-dev liblzma-dev netcat-openbsd
sudo apt-get -y install hdparm iotop nut obfs4proxy libpq-dev socat btrfs-progs i2pd

# Install packages dependent on Debian release
if [ "$DEBIAN_VERSION" == "bullseye" ] || [ "$DEBIAN_VERSION" == "jammy" ]; then
    sudo apt-get -y install wireguard
elif [ "$DEBIAN_VERSION" == "buster" ]; then
    $TORIFY sudo apt-get -y -t buster-backports install wireguard
else
    echo .
    echo "========================================="
    echo "== UNKNOWN DEBIAN VERSION: $DEBIAN_VERSION"
    echo "== SOME APPS MAY NOT WORK PROPERLY"
    echo "========================================="
    echo .
fi

# Install Openbox GUI if not desktop available
if [ $IS_X86 = 1 ] && [ -z $DESKTOP_SESSION ]; then
    sudo apt-get -y install xorg chromium openbox lightdm
fi

# Install device specific packages
if [ $IS_X86 = 1 ]; then
    sudo apt-get -y install cloud-init
fi

# Make sure some software is removed
sudo apt-get -y purge ntp # (conflicts with systemd-timedatectl)
if [ $(lsb_release -i | awk -F ":" '{printf tolower($2)}') != "pop" ]; then
    sudo apt-get -y purge chrony # (conflicts with systemd-timedatectl)
fi

# Install other things without recommendation
sudo apt-get -y install --no-install-recommends expect


# Install nginx
sudo mkdir -p /var/log/nginx
$TORIFY sudo apt-get -y install nginx || true
# Install may fail, so we need to edit the default config file and reconfigure
sudo rm -f /etc/nginx/modules-enabled/50-mod-* || true
sudo echo "" > /etc/nginx/sites-available/default
sudo dpkg --configure -a


# Update users
sudo usermod -a -G debian-tor bitcoin

# Make admin a member of bitcoin
sudo adduser admin bitcoin
sudo adduser joinmarket bitcoin
sudo grep "joinmarket" /etc/sudoers || (echo 'joinmarket ALL=(ALL) NOPASSWD:ALL' | EDITOR='tee -a' visudo)


# Install Python3 (latest)
CURRENT_PYTHON3_VERSION=$(python3 --version)
if [[ "$CURRENT_PYTHON3_VERSION" != *"Python ${PYTHON_VERSION}"* ]]; then
    sudo mkdir -p /opt/download
    sudo cd /opt/download
    sudo rm -rf Python-*

    sudo wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz -O python.tar.xz
    sudo tar xf python.tar.xz

    sudo cd Python-*
    sudo ./configure
    sudo make -j "$(($(nproc)))"
    sudo make install
    cd ~
else
    echo "Python up to date"
fi


# Install Python3 specific tools
sudo pip3 install --upgrade pip wheel setuptools

sudo pip3 install -r $TMP_INSTALL_PATH/usr/share/mynode/mynode_pip3_requirements.txt --no-cache-dir || \
    sudo pip3 install -r $TMP_INSTALL_PATH/usr/share/mynode/mynode_pip3_requirements.txt --no-cache-dir --use-deprecated=html5lib



# Install node
if [ ! -f /tmp/installed_node ]; then
    sudo curl -sL https://deb.nodesource.com/setup_$NODE_JS_VERSION | sudo bash -
    sudo apt-get install -y nodejs
    sudo touch /tmp/installed_node
fi

# Install docker
sudo mkdir -p /etc/apt/keyrings


if [ LINUX == "debian" ]; then
    sudo curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update --allow-releaseinfo-change
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin || true

elif [ LINUX == "ubuntu" ]; then
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --batch --yes --dearmor -o /etc/apt/keyrings/docker.gpg

    sudo echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update --allow-releaseinfo-change
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin || true 
else
    sudo apt update --allow-releaseinfo-change
    sudo apt install -y docker docker-compose
fi

# Use systemd for managing docker
sudo rm -f /etc/init.d/docker
sudo rm -f /etc/systemd/system/multi-user.target.wants/docker.service
sudo systemctl -f enable docker.service

sudo groupadd docker || true
sudo usermod -aG docker admin
sudo usermod -aG docker bitcoin
sudo usermod -aG docker root

# Install node packages
sudo npm install -g pug-cli browserify uglify-js babel-cli
sudo npm install -g npm@$NODE_NPM_VERSION
sudo npm install -g yarn


# Remove existing MOTD login info
sudo rm -rf /etc/motd
sudo rm -rf /etc/update-motd.d/*

#########################################################


# Install Bitcoin
echo .
echo "Installing Bitcoin core..."
echo .

ARCH="x86_64-linux-gnu"

BTC_UPGRADE_URL=https://bitcoincore.org/bin/bitcoin-core-$BTC_VERSION/bitcoin-$BTC_VERSION-$ARCH.tar.gz
BTC_UPGRADE_SHA256SUM_URL=https://bitcoincore.org/bin/bitcoin-core-$BTC_VERSION/SHA256SUMS
BTC_UPGRADE_SHA256SUM_ASC_URL=https://bitcoincore.org/bin/bitcoin-core-$BTC_VERSION/SHA256SUMS.asc
BTC_CLI_COMPLETION_URL=https://raw.githubusercontent.com/bitcoin/bitcoin/v$BTC_VERSION/contrib/bitcoin-cli.bash-completion
CURRENT=""
if [ -f $BTC_VERSION_FILE ]; then
    CURRENT=$(cat $BTC_VERSION_FILE)
fi
if [ "$CURRENT" != "$BTC_VERSION" ]; then
    # Download and install Bitcoin
    sudo rm -rf /opt/download
    sudo mkdir -p /opt/download
    sudo cd /opt/download

    sudo wget $BTC_UPGRADE_URL
    sudo wget $BTC_UPGRADE_SHA256SUM_URL -O SHA256SUMS
    sudo wget $BTC_UPGRADE_SHA256SUM_ASC_URL -O SHA256SUMS.asc

    sudo sha256sum --ignore-missing --check SHA256SUMS

    # Install Bitcoin
    sudo tar -xvf bitcoin-$BTC_VERSION-$ARCH.tar.gz
    sudo mv bitcoin-$BTC_VERSION bitcoin
    sudo install -m 0755 -o root -g root -t /usr/local/bin bitcoin/bin/*
    
    if [ ! -L /home/bitcoin/.bitcoin ]; then
        sudo -u bitcoin ln -s /mnt/hdd/mynode/bitcoin /home/bitcoin/.bitcoin
    fi
    if [ ! -L /home/bitcoin/.lnd ]; then
        sudo -u bitcoin ln -s /mnt/hdd/mynode/lnd /home/bitcoin/.lnd
    fi
    sudo mkdir -p /home/admin/.bitcoin
    sudo echo $BTC_VERSION > $BTC_VERSION_FILE

    # Install bash-completion for bitcoin-cli
    sudo wget $BTC_CLI_COMPLETION_URL -O bitcoin-cli.bash-completion
    sudo cp bitcoin-cli.bash-completion /etc/bash_completion.d/bitcoin-cli
fi
cd ~

# Install Lightning
echo .
echo "Installing Lightning..."
echo .
LND_ARCH="lnd-linux-amd64"
LND_UPGRADE_URL=https://github.com/lightningnetwork/lnd/releases/download/$LND_VERSION/$LND_ARCH-$LND_VERSION.tar.gz
LNCLI_COMPLETION_URL=https://raw.githubusercontent.com/lightningnetwork/lnd/$LND_VERSION/contrib/lncli.bash-completion
CURRENT=""

if [ -f $LND_VERSION_FILE ]; then
    CURRENT=$(cat $LND_VERSION_FILE)
fi
if [ "$CURRENT" != "$LND_VERSION" ]; then
    sudo rm -rf /opt/download
    sudo mkdir -p /opt/download
    sudo cd /opt/download

    sudo wget $LND_UPGRADE_URL
    sudo wget $LND_UPGRADE_MANIFEST_URL -O manifest.txt
    sudo wget $LND_UPGRADE_MANIFEST_ROASBEEF_SIG_URL -O manifest_roasbeef.txt.sig || true
    sudo wget $LND_UPGRADE_MANIFEST_GUGGERO_SIG_URL -O manifest_guggero.txt.sig || true

    sudo gpg --verify manifest_roasbeef.txt.sig manifest.txt || \
        sudo gpg --verify manifest_guggero.txt.sig manifest.txt

    sudo tar -xzf lnd-*.tar.gz
    sudo mv $LND_ARCH-$LND_VERSION lnd
    sudo install -m 0755 -o root -g root -t /usr/local/bin lnd/*
    sudo ln -s /bin/ip /usr/bin/ip || true

    sudo echo $LND_VERSION > $LND_VERSION_FILE

    # Download bash-completion file for lncli
    sudo wget $LNCLI_COMPLETION_URL
    sudo sudo cp lncli.bash-completion /etc/bash_completion.d/lncli
fi
cd ~

# Install Loop
echo .
echo "Installing loop..."
echo .
LOOP_ARCH="loop-linux-armv7"
if [ $IS_X86 = 1 ]; then
    LOOP_ARCH="loop-linux-amd64"
fi
if [ $IS_RASPI4_ARM64 = 1 ]; then
    LOOP_ARCH="loop-linux-arm64"
fi
LOOP_UPGRADE_URL=https://github.com/lightninglabs/loop/releases/download/$LOOP_VERSION/$LOOP_ARCH-$LOOP_VERSION.tar.gz
CURRENT=""
if [ -f $LOOP_VERSION_FILE ]; then
    CURRENT=$(cat $LOOP_VERSION_FILE)
fi
if [ "$CURRENT" != "$LOOP_VERSION" ]; then
    # Download and install Loop
    sudo rm -rf /opt/download
    sudo mkdir -p /opt/download
    sudo cd /opt/download

    sudo wget $LOOP_UPGRADE_URL
    sudo wget $LOOP_UPGRADE_MANIFEST_URL -O manifest.txt
    sudo wget $LOOP_UPGRADE_MANIFEST_SIG_URL -O manifest.txt.sig

    sudo gpg --verify manifest.txt.sig manifest.txt
    if [ $? == 0 ]; then
        # Install Loop
        sudo tar -xzf loop-*.tar.gz
        sudo mv $LOOP_ARCH-$LOOP_VERSION loop
        sudo install -m 0755 -o root -g root -t /usr/local/bin loop/*

        # Mark current version
        sudo echo $LOOP_VERSION > $LOOP_VERSION_FILE
    else
        echo "ERROR UPGRADING LND - GPG FAILED"
    fi
fi

# Install Pool
echo .
echo "Installing pool..."
echo .

POOL_ARCH="pool-linux-amd64"
POOL_UPGRADE_URL=https://github.com/lightninglabs/pool/releases/download/$POOL_VERSION/$POOL_ARCH-$POOL_VERSION.tar.gz
CURRENT=""
if [ -f $POOL_VERSION_FILE ]; then
    CURRENT=$(cat $POOL_VERSION_FILE)
fi
if [ "$CURRENT" != "$POOL_VERSION" ]; then
    # Download and install pool
    sudo rm -rf /opt/download
    sudo mkdir -p /opt/download
    sudo cd /opt/download

    sudo wget $POOL_UPGRADE_URL
    sudo wget $POOL_UPGRADE_MANIFEST_URL -O manifest.txt
    sudo wget $POOL_UPGRADE_MANIFEST_SIG_URL -O manifest.txt.sig

    sudo gpg --verify manifest.txt.sig manifest.txt
    if [ $? == 0 ]; then
        # Install Pool
        sudo tar -xzf pool-*.tar.gz
        sudo mv $POOL_ARCH-$POOL_VERSION pool
        sudo install -m 0755 -o root -g root -t /usr/local/bin pool/*

        # Mark current version
        sudo echo $POOL_VERSION > $POOL_VERSION_FILE
    else
        echo "ERROR UPGRADING POOL - GPG FAILED"
    fi
fi

# Install Lightning Terminal
echo .
echo "Installing Lightning Terminal..."
echo .

LIT_ARCH="lightning-terminal-linux-amd64"
LIT_UPGRADE_URL=https://github.com/lightninglabs/lightning-terminal/releases/download/$LIT_VERSION/$LIT_ARCH-$LIT_VERSION.tar.gz
CURRENT=""
if [ -f $LIT_VERSION_FILE ]; then
    CURRENT=$(cat $LIT_VERSION_FILE)
fi
if [ "$CURRENT" != "$LIT_VERSION" ]; then
    # Download and install lit
    sudo rm -rf /opt/download
    sudo mkdir -p /opt/download
    sudo cd /opt/download

    sudo wget $LIT_UPGRADE_URL
    sudo wget $LIT_UPGRADE_MANIFEST_URL -O manifest.txt
    sudo wget $LIT_UPGRADE_MANIFEST_SIG_URL  -O manifest.txt.sig

    sudo gpg --verify manifest.txt.sig manifest.txt
    if [ $? == 0 ]; then
        # Install lit
        sudo tar -xzf lightning-terminal-*.tar.gz
        sudo mv $LIT_ARCH-$LIT_VERSION lightning-terminal
        sudo sudo install -m 0755 -o root -g root -t /usr/local/bin lightning-terminal/lit*

        # Mark current version
        sudo echo $LIT_VERSION > $LIT_VERSION_FILE
    else
        echo "ERROR UPGRADING LIT - GPG FAILED"
    fi
fi
cd ~


# Setup "install" location for some apps
sudo mkdir -p /opt/mynode
sudo chown -R bitcoin:bitcoin /opt/mynode


# Install LND Hub
echo .
echo "Installing LND Hub..."
echo .
LNDHUB_UPGRADE_URL=https://github.com/BlueWallet/LndHub/archive/$LNDHUB_VERSION.tar.gz
CURRENT=""
if [ -f $LNDHUB_VERSION_FILE ]; then
    CURRENT=$(cat $LNDHUB_VERSION_FILE)
fi
if [ "$CURRENT" != "$LNDHUB_VERSION" ]; then
    sudo cd /opt/mynode
    sudo rm -rf LndHub

    sudo wget $LNDHUB_UPGRADE_URL
    sudo tar -xzf ${LNDHUB_VERSION}.tar.gz
    sudo rm -f ${LNDHUB_VERSION}.tar.gz
    sudo mv LndHub-* LndHub
    sudo chown -R bitcoin:bitcoin LndHub

    sudo cd LndHub
    sudo -u bitcoin npm install --only=production
    sudo -u bitcoin ln -s /home/bitcoin/.lnd/tls.cert tls.cert
    sudo -u bitcoin ln -s /home/bitcoin/.lnd/data/chain/bitcoin/mainnet/admin.macaroon admin.macaroon
    sudo echo $LNDHUB_VERSION > $LNDHUB_VERSION_FILE
fi
cd ~


# Install cors proxy (my fork)
echo .
echo "Installing cors proxy by tehelsper..."
echo .
CORSPROXY_UPGRADE_URL=https://github.com/tehelsper/CORS-Proxy/archive/$CORSPROXY_VERSION.tar.gz
CURRENT=""
if [ -f $CORSPROXY_VERSION_FILE ]; then
    CURRENT=$(cat $CORSPROXY_VERSION_FILE)
fi
if [ "$CURRENT" != "$CORSPROXY_VERSION" ]; then
    sudo cd /opt/mynode
    sudo rm -rf corsproxy

    sudo rm -f corsproxy.tar.gz
    sudo wget $CORSPROXY_UPGRADE_URL -O corsproxy.tar.gz
    sudo tar -xzf corsproxy.tar.gz
    sudo rm -f corsproxy.tar.gz
    sudo mv CORS-* corsproxy

    sudo cd corsproxy
    sudo npm install
    sudo echo $CORSPROXY_VERSION > $CORSPROXY_VERSION_FILE
fi
cd ~


# Install Electrs (just mark version, now included in overlay)
echo .
echo "Installing Electrs..."
echo .

sudo echo $ELECTRS_VERSION > $ELECTRS_VERSION_FILE


# Install recent version of secp256k1
echo .
echo "Installing secp256k1..."
echo .

SECP256K1_UPGRADE_URL=https://github.com/bitcoin-core/secp256k1/archive/$SECP256K1_VERSION.tar.gz
CURRENT=""
if [ -f $SECP256K1_VERSION_FILE ]; then
    CURRENT=$(cat $SECP256K1_VERSION_FILE)
fi
if [ "$CURRENT" != "$SECP256K1_VERSION" ]; then
    sudo rm -rf /tmp/secp256k1
    sudo cd /tmp/
    sudo git clone https://github.com/bitcoin-core/secp256k1.git
    sudo cd secp256k1

    sudo ./autogen.sh
    sudo ./configure --enable-module-recovery --disable-jni --enable-experimental --enable-module-ecdh --enable-benchmark=no
    sudo make "$(($(nproc)))"
    sudo make install
    sudo cp -f include/* /usr/include/

    sudo echo $SECP256K1_VERSION > $SECP256K1_VERSION_FILE
fi

# Install JoinInBox
echo .
echo "Installing JoinInBox..."
echo .
JOININBOX_UPGRADE_URL=https://github.com/openoms/joininbox/archive/$JOININBOX_VERSION.tar.gz
CURRENT=""
if [ -f $JOININBOX_VERSION_FILE ]; then
    CURRENT=$(cat $JOININBOX_VERSION_FILE)
fi
if [ "$CURRENT" != "$JOININBOX_VERSION" ]; then
    # Download and build JoinInBox
    sudo cd /home/joinmarket

    # Delete all non-hidden files
    sudo rm -rf *
    sudo rm -rf joininbox-*

    sudo -u joinmarket wget $JOININBOX_UPGRADE_URL -O joininbox.tar.gz
    sudo -u joinmarket tar -xvf joininbox.tar.gz
    sudo -u joinmarket rm joininbox.tar.gz
    sudo mv joininbox-* joininbox

    sudo chmod -R +x ./joininbox/
    sudo -u joinmarket cp -rf ./joininbox/scripts/* .

    # Install
    sudo -u joinmarket bash -c "cd /home/joinmarket/; ${JM_ENV_VARS} ./install.joinmarket.sh --install install" || true
    sudo -u joinmarket bash -c "cd /home/joinmarket/; ${JM_ENV_VARS} ./install.joinmarket-api.sh on" || true

    # Enable obwatcher at the end of setup_device.sh

    sudo echo $JOININBOX_VERSION > $JOININBOX_VERSION_FILE
fi

# Install Whirlpool
echo .
echo "Installing Whirlpool..."
echo .
WHIRLPOOL_UPGRADE_URL=https://code.samourai.io/whirlpool/whirlpool-client-cli/uploads/$WHIRLPOOL_UPLOAD_FILE_ID/whirlpool-client-cli-$WHIRLPOOL_VERSION-run.jar
CURRENT=""
if [ -f $WHIRLPOOL_VERSION_FILE ]; then
    CURRENT=$(cat $WHIRLPOOL_VERSION_FILE)
fi
if [ "$CURRENT" != "$WHIRLPOOL_VERSION" ]; then
    sudo -u bitcoin mkdir -p /opt/mynode/whirlpool
    sudo cd /opt/mynode/whirlpool
    sudo rm -rf *.jar
    sudo -u bitcoin wget -O whirlpool.jar $WHIRLPOOL_UPGRADE_URL

    sudo cp -f $TMP_INSTALL_PATH/usr/share/whirlpool/whirlpool.asc whirlpool.asc
    sudo gpg --verify whirlpool.asc

    sudo echo $WHIRLPOOL_VERSION > $WHIRLPOOL_VERSION_FILE
fi


# Install RTL
echo .
echo "Installing RTL..."
echo .
RTL_UPGRADE_URL=https://github.com/Ride-The-Lightning/RTL/archive/$RTL_VERSION.tar.gz
RTL_UPGRADE_ASC_URL=https://github.com/Ride-The-Lightning/RTL/releases/download/$RTL_VERSION/$RTL_VERSION.tar.gz.asc
CURRENT=""
if [ -f $RTL_VERSION_FILE ]; then
    CURRENT=$(cat $RTL_VERSION_FILE)
fi
if [ "$CURRENT" != "$RTL_VERSION" ]; then
    sudo cd /opt/mynode
    sudo rm -rf RTL

    sudo sudo -u bitcoin wget $RTL_UPGRADE_URL -O RTL.tar.gz
    #sudo -u bitcoin wget $RTL_UPGRADE_ASC_URL -O RTL.tar.gz.asc

    #gpg --verify RTL.tar.gz.asc RTL.tar.gz

    sudo -u bitcoin tar -xvf RTL.tar.gz
    sudo -u bitcoin rm RTL.tar.gz
    sudo -u bitcoin mv RTL-* RTL
    sudo cd RTL
    sudo -u bitcoin NG_CLI_ANALYTICS=false npm install --only=production --legacy-peer-deps
    sudo -u bitcoin npm install request --save

    sudo echo $RTL_VERSION > $RTL_VERSION_FILE
fi


# Install BTC RPC Explorer
echo .
echo "Installing BTC RPC Explorer..."
echo .
BTCRPCEXPLORER_UPGRADE_URL=https://github.com/janoside/btc-rpc-explorer/archive/$BTCRPCEXPLORER_VERSION.tar.gz
CURRENT=""
if [ -f $BTCRPCEXPLORER_VERSION_FILE ]; then
    CURRENT=$(cat $BTCRPCEXPLORER_VERSION_FILE)
fi
if [ "$CURRENT" != "$BTCRPCEXPLORER_VERSION" ]; then
    sudo cd /opt/mynode
    sudo rm -rf btc-rpc-explorer
    sudo -u bitcoin wget $BTCRPCEXPLORER_UPGRADE_URL -O btc-rpc-explorer.tar.gz
    sudo -u bitcoin tar -xvf btc-rpc-explorer.tar.gz
    sudo -u bitcoin rm btc-rpc-explorer.tar.gz
    sudo -u bitcoin mv btc-rpc-* btc-rpc-explorer
    sudo cd btc-rpc-explorer
    sudo -u bitcoin npm install --only=production

    sudo echo $BTCRPCEXPLORER_VERSION > $BTCRPCEXPLORER_VERSION_FILE
fi


# Upgrade Specter Desktop
echo .
echo "Upgrading Specter Desktop..."
echo .
CURRENT=""
if [ -f $SPECTER_VERSION_FILE ]; then
    CURRENT=$(cat $SPECTER_VERSION_FILE)
fi
if [ "$CURRENT" != "$SPECTER_VERSION" ]; then
    sudo cd /opt/mynode
    sudo rm -rf specter
    sudo mkdir -p specter
    sudo chown -R bitcoin:bitcoin specter
    sudo cd specter

    # Make venv
    if [ ! -d env ]; then
        sudo -u bitcoin python3 -m venv env
    fi
    sudo source env/bin/activate
    sudo pip3 install ecdsa===0.13.3
    sudo pip3 install cryptoadvance.specter===$SPECTER_VERSION --upgrade
    sudo deactivate

    sudo echo $SPECTER_VERSION > $SPECTER_VERSION_FILE
fi


# Upgrade Thunderhub
echo .
echo "Upgrading Thunderhub..."
echo .
THUNDERHUB_UPGRADE_URL=https://github.com/apotdevin/thunderhub/archive/$THUNDERHUB_VERSION.tar.gz
CURRENT=""
if [ -f $THUNDERHUB_VERSION_FILE ]; then
    CURRENT=$(cat $THUNDERHUB_VERSION_FILE)
fi
if [ "$CURRENT" != "$THUNDERHUB_VERSION" ]; then
    sudo cd /opt/mynode
    sudo rm -rf thunderhub
    sudo -u bitcoin wget $THUNDERHUB_UPGRADE_URL -O thunderhub.tar.gz
    sudo -u bitcoin tar -xvf thunderhub.tar.gz
    sudo -u bitcoin rm thunderhub.tar.gz
    sudo -u bitcoin mv thunderhub-* thunderhub
    sudo cd thunderhub

    # Patch versions
    sudo sed -i 's/\^5.3.5/5.3.3/g' package.json || true     # Fixes segfault with 5.3.5 on x86

    sudo -u bitcoin npm install --legacy-peer-deps # --only=production # (can't build with only production)
    sudo -u bitcoin npm run build
    sudo -u bitcoin npx next telemetry disable

    # Setup symlink to service files
    sudo rm -f /opt/mynode/thunderhub/.env.local
    sudo ln -s /mnt/hdd/mynode/thunderhub/.env.local /opt/mynode/thunderhub/.env.local

    sudo echo $THUNDERHUB_VERSION > $THUNDERHUB_VERSION_FILE
fi


# Install LND Connect
echo .
echo "Installing LND Connect..."
echo .
LNDCONNECTARCH="lndconnect-linux-amd64"
LNDCONNECT_UPGRADE_URL=https://github.com/LN-Zap/lndconnect/releases/download/v0.2.0/$LNDCONNECTARCH-$LNDCONNECT_VERSION.tar.gz
CURRENT=""
if [ -f $LNDCONNECT_VERSION_FILE ]; then
    CURRENT=$(cat $LNDCONNECT_VERSION_FILE)
fi
if [ "$CURRENT" != "$LNDCONNECT_VERSION" ]; then
    sudo rm -rf /opt/download
    sudo mkdir -p /opt/download
    sudo cd /opt/download
    sudo wget $LNDCONNECT_UPGRADE_URL -O lndconnect.tar.gz
    sudo tar -xvf lndconnect.tar.gz
    sudo rm lndconnect.tar.gz
    sudo mv lndconnect-* lndconnect
    sudo install -m 0755 -o root -g root -t /usr/local/bin lndconnect/*

    sudo echo $LNDCONNECT_VERSION > $LNDCONNECT_VERSION_FILE
fi


# Install ngrok for debugging
echo .
echo "Installing ngrok for debugging..."
echo .
if [ ! -f /usr/bin/ngrok  ]; then
    sudo cd /tmp
    NGROK_URL=https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm.zip
    NGROK_URL=https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-386.zip
    sudo wget $NGROK_URL
    sudo unzip ngrok-*.zip
    sudo cp ngrok /usr/bin/
fi

# Make sure "Remote Access" apps are marked installed
sudo touch /home/bitcoin/.mynode/install_tor
sudo touch /home/bitcoin/.mynode/install_premium_plus
sudo touch /home/bitcoin/.mynode/install_vpn

# Mark docker images for install (on SD so install occurs after drive attach)
sudo touch /home/bitcoin/.mynode/install_mempool
sudo touch /home/bitcoin/.mynode/install_btcpayserver
sudo touch /home/bitcoin/.mynode/install_dojo

# SKIPPING LNBITS - OPTIONAL ALL
# SKIPPING CKBUNKER - OPTIONAL APP
# SKIPPING SPHINX - OPTIONAL APP
# SKIPPING BOS - OPTIONAL APP
# SKIPPING PYBLOCK - OPTIONAL APP
# SKIPPING WARDEN - OPTIONAL APP


# Make sure we are using legacy iptables
sudo update-alternatives --set iptables /usr/sbin/iptables-legacy || true
sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy || true


#########################################################


# Install files (downloaded and extracted earlier)
sudo rsync -r -K /tmp/upgrade/out/rootfs_*/* /
sudo sync
sleep 1


# Mark dynamic applications as defalt application
# ... (none yet)

# Upgrade Dyanmic Applications (must be done after file installation)
# mynode-manage-apps upgrade # not yet working during setup process


# Random Cleanup
sudo rm -rf /opt/download
sudo mkdir -p /opt/download

# Clean apt-cache
sudo apt-get autoclean
sudo apt-get -y autoremove

# Setup myNode Startup Script
sudo systemctl daemon-reload
sudo systemctl enable check_in
sudo systemctl enable premium_plus_connect
sudo systemctl enable background
sudo systemctl enable docker
sudo systemctl enable mynode
sudo systemctl enable quicksync
sudo systemctl enable torrent_check
sudo systemctl enable firewall
sudo systemctl enable bandwidth
sudo systemctl enable www
sudo systemctl enable drive_check
sudo systemctl enable bitcoin
sudo systemctl enable seed_bitcoin_peers
sudo systemctl enable lnd
sudo systemctl enable loop
sudo systemctl enable pool
sudo systemctl enable lit
#systemctl enable lnd_unlock # NOT NECESSARY WITH LND 0.13+
sudo systemctl enable lnd_backup
sudo systemctl enable lnd_admin_files
sudo systemctl enable lndconnect
sudo systemctl enable redis-server
#systemctl enable mongodb
#systemctl enable electrs # DISABLED BY DEFAULT
#systemctl enable lndhub # DISABLED BY DEFAULT
#systemctl enable btcrpcexplorer # DISABLED BY DEFAULT
sudo systemctl enable rtl
sudo systemctl enable tor
sudo systemctl enable i2pd
sudo systemctl enable invalid_block_check
sudo systemctl enable usb_driver_check
sudo systemctl enable docker_images
sudo systemctl enable glances
#systemctl enable netdata # DISABLED BY DEFAULT
sudo systemctl enable webssh2
sudo systemctl enable rotate_logs
sudo systemctl enable corsproxy_btcrpc
sudo systemctl enable usb_extras
sudo systemctl enable ob-watcher


# Disable services
sudo systemctl disable hitch || true
sudo systemctl disable mongodb || true
sudo systemctl disable dhcpcd || true


# Delete junk
sudo rm -rf /home/admin/download
sudo rm -rf /home/admin/.bash_history
sudo rm -rf /home/bitcoin/.bash_history
sudo rm -rf /root/.bash_history
sudo rm -rf /root/.ssh/known_hosts
sudo rm -rf /etc/resolv.conf
sudo rm -rf /tmp/*
sudo rm -rf ~/setup_device.sh
sudo rm -rf /etc/motd # Remove simple motd for update-motd.d

# Remove default debian stuff
sudo deluser mynode || true
sudo rm -rf /home/mynode || true

# Add fsck force to startup for x86
if [ $IS_X86 = 1 ]; then
    sudo sed -i "s/GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet fsck.mode=force fsck.repair=yes\"/g" /etc/default/grub
    sudo update-grub
fi

# Add generic boot option if UEFI
if [ -f /boot/efi/EFI/debian/grubx64.efi ]; then
    sudo mkdir -p /boot/efi/EFI/BOOT
    sudo cp -f /boot/efi/EFI/debian/grubx64.efi /boot/efi/EFI/BOOT/bootx64.efi
fi

sudo sync

set +x
echo ""
echo ""
echo "##################################"
echo "          SETUP COMPLETE          "
echo "   Reboot your device to begin!   "
echo "##################################"
echo ""
echo ""
